---
description: 
globs: 
alwaysApply: false
---
# WorldLora Search (`worldlora-search`) 前端开发工作流

## 核心原则

本项目的前端开发遵循特定的工作流程，旨在分离 UI 设计/生成与本地逻辑集成。

*   **UI 设计与生成中心:** [v0.dev](mdc:https:/v0.dev)
*   **本地开发焦点:** 前后端逻辑集成与验证

## 工作流程详解

1.  **UI 组件与布局生成:**
    *   所有新的用户界面组件、布局和视觉样式都在 v0.dev 上设计和生成。
    *   这包括但不限于页面结构、按钮、表单、卡片等视觉元素。

2.  **代码获取:**
    *   在 v0.dev 上完成设计后，使用类似以下命令将生成的代码拉取到本地 `worldlora-search` 项目中：
        ```bash
        npx shadcn add <v0.dev_component_url>
        ```
    *   此操作会将 v0.dev 生成的 React 组件（通常带有 Tailwind CSS 类）添加到本地代码库（例如 `src/components` 目录）。

3.  **本地集成与逻辑实现:**
    *   **主要任务:** 本地开发环境的核心任务是将从 v0.dev 获取的前端组件与后端 API 和数据流集成起来。
    *   **关注点:**
        *   确保数据能够正确地从后端 API 获取（通过 `SWR` 或其他方式，参见 `[src/hooks/use-data.ts](mdc:worldlora-search/src/hooks/use-data.ts)` 和 `[src/app/api](mdc:worldlora-search/src/app/api)` 下的路由）。
        *   实现组件的交互逻辑（例如，点击按钮触发 API 调用、表单提交处理）。
        *   连接前端状态管理（如果需要）和组件行为。
        *   验证整个数据流和用户交互路径是否按预期工作。
    *   **非关注点:** 本地开发不应涉及：
        *   从头创建 UI 组件。
        *   对组件进行像素级的样式调整或视觉美化（这些应在 v0.dev 完成）。
        *   测试 UI 在不同屏幕尺寸下的视觉效果（除非是为集成逻辑所必需）。

4.  **运行与验证:**
    *   使用 `npm run dev` (配置在 `[package.json](mdc:worldlora-search/package.json)` 中，通常监听端口 4000) 启动本地开发服务器。
    *   本地测试的重点是验证功能是否跑通：数据是否正确加载和显示？交互是否按预期触发后端逻辑？状态是否正确更新？

## 与 v0.dev 的交互方式

**核心理念：将"数据需求"转化为"视觉需求"**

v0.dev 不了解也不需要了解你的后端 API 或数据结构。你需要将你想要展示的数据信息，描述成 v0 能理解的纯粹的 UI 组件外观和结构需求。

**提问策略：**

1.  **明确页面布局和组件:** 描述页面的大体结构和所需的基础 UI 元素（如搜索框、按钮、网格、卡片）。
2.  **描述动态元素的视觉表现:** 对于需要展示数据的地方（如搜索结果卡片），专注于描述它的 *外观* 和 *包含的信息类型*，而不是具体的后端字段名。
    *   例如，不要说"显示 `modelName`"，而要说"需要一个**标题区域**来放名称"。
3.  **指定技术栈（推荐）:** 明确希望使用的库，如 `shadcn/ui` 和 Tailwind CSS。
4.  **（可选）补充简单交互:** 描述纯前端的视觉交互效果（如悬停效果），复杂逻辑留给本地实现。

**向 v0.dev 提问的详细示例:**

```text
请为 WorldLora 项目设计一个搜索结果展示页面。

**页面布局:**
*   页面顶部需要一个搜索区域，包含一个文本输入框（Input）和一个搜索按钮（Button）。让它们在页面居中或占据合适的宽度。
*   搜索区域下方是一个用于展示结果的区域。

**结果展示区:**
*   使用网格布局（Grid）来排列搜索结果。请确保网格在不同屏幕尺寸下能响应式地调整列数（例如，大屏幕 4 列，中等屏幕 3 列，小屏幕 1-2 列）。
*   网格中的每一项都是一个卡片（Card）组件。

**卡片（Card）内部结构:**
*   **顶部:** 一个用于显示图片的区域（例如，使用 `AspectRatio` 组件包裹 `Image`，保持固定的宽高比）。请给一个默认的占位图或背景色。
*   **中部:**
    *   一个**主标题**（例如 `h3` 或 CardTitle），用于显示项目的名称。请使用加粗字体。
    *   一行**描述性文字**（例如 `p` 或 CardDescription），在主标题下方，用于显示作者或其他简短信息。
*   **底部:** 一个区域用于水平排列多个**徽章**（Badge）组件，用来展示分类标签。

**技术要求:**
*   请使用 `shadcn/ui` 组件库进行构建。
*   所有样式请使用 Tailwind CSS。

**请注意:**
*   你只需要关注 UI 的视觉呈现和布局。
*   不需要实现任何数据获取、状态管理或实际的搜索逻辑，这些将在后续开发中完成。我只需要纯粹的、结构化的 JSX 组件代码。
```

**交互流程回顾:**

1.  **构思视觉需求:** 根据你需要展示的数据，构思 UI 的外观和结构。
2.  **向 v0 提问:** 使用上述策略和示例格式，向 v0.dev 描述你的视觉需求。
3.  **获取 v0 代码:** 从 v0.dev 获取生成的 UI 组件代码（通常通过 `npx shadcn add ...` 命令）。
4.  **本地集成:** 在本地对应的页面文件（如 `[src/app/search/page.tsx](mdc:worldlora-search/src/app/search/page.tsx)`）中，导入并使用 v0 生成的组件，并通过 props 或 hooks 将实际数据填充进去。

## 总结

本地环境是 **逻辑验证场**，而非 **UI 设计室**。UI 的生产发生在 v0.dev，本地只负责将这些生产好的 UI 组件赋予生命（连接数据和逻辑）。



